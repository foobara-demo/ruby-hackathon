#!/usr/bin/env ruby

require_relative "boot"

module FoobaraDemo
  module LoanOrigination
    class FindALoanFileThatNeedsReview < Foobara::Command
      depends_on FindLoanFileBy

      description "Will return a loan file that needs review or nil if there are no loan files that need review"

      result LoanFile, :allow_nil

      def execute
        find_loan_file_that_needs_review
        loan_file
      end

      attr_accessor :loan_file

      def find_loan_file_that_needs_review
        self.loan_file = run_subcommand!(FindLoanFileBy, state: "needs_review")
      end
    end

    class StartUnderwriterReview < Foobara::AgentBackedCommand
      description "Starts the review by moving the loan file from needs_review to in_review"

      inputs do
        loan_file LoanFile, :required
      end
    end

    class ApproveLoanFile < Foobara::AgentBackedCommand
      depends_on CreateUnderwriterDecision, TransitionLoanFileState

      inputs do
        credit_score_used :integer, :required
        loan_file LoanFile, :required
      end
    end

    class DenyLoanFile < Foobara::AgentBackedCommand
      depends_on CreateUnderwriterDecision, TransitionLoanFileState

      possible_input_error :denied_reasons, :cannot_be_empty

      inputs do
        credit_score_used :integer, :required
        denied_reasons [:denied_reason], :required
        loan_file LoanFile, :required
      end
    end

    class UnderwriterSummary < Foobara::Model
      attributes do
        loan_file_id :integer, :required
        pay_stub_count :integer, :required
        fico_scores [:integer, :integer, :integer], :required
        credit_policy CreditPolicy, :required
      end
    end

    class ReviewLoanFile < Foobara::AgentBackedCommand
      description "Starts the underwriter review then checks requirements in its CreditPolicy " \
                  "and approves or denies accordingly."

      inputs UnderwriterSummary
      result LoanFile::UnderwriterDecision

      depends_on StartUnderwriterReview, DenyLoanFile, ApproveLoanFile
    end

    class ReviewAllLoanFiles < Foobara::AgentBackedCommand
      result [{
        applicant_name: :string,
        decision: LoanFile::UnderwriterDecision
      }]

      depends_on ReviewLoanFile, FindALoanFileThatNeedsReview
    end
  end
end

llm_model = nil

FoobaraDemo::LoanOrigination.foobara_command_classes.each do |command_class|
  next unless command_class < Foobara::AgentBackedCommand

  command_class.verbose
  command_class.llm_model(llm_model) if llm_model
end

outcome = FoobaraDemo::LoanOrigination::ReviewAllLoanFiles.run

if outcome.success?
  outcome.result.each do |name_and_decision|
    name, decision = name_and_decision.values_at(:applicant_name, :decision)

    if decision.denied?
      puts "Denied: #{name}"
      puts "Reason: #{decision.denied_reasons.join(", ")}"
    else
      puts "Approve: #{name}"
    end
    puts
  end
else
  puts outcome.errors_hash
end
