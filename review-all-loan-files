#!/usr/bin/env ruby

require_relative "boot"

module FoobaraDemo
  module LoanOrigination
    class UnderwriterSummary < Foobara::Model
      attributes do
        loan_file_id :integer, :required
        pay_stub_count :integer, :required
        fico_scores [:integer, :integer, :integer], :required
        credit_policy CreditPolicy, :required
      end
    end

    class ApproveLoanFile < Foobara::AgentBackedCommand
      depends_on CreateUnderwriterDecision, TransitionLoanFileState

      inputs do
        credit_score_used :integer, :required
        loan_file LoanFile, :required
      end

      verbose
    end

    class DenyLoanFile < Foobara::Command
      depends_on CreateUnderwriterDecision, TransitionLoanFileState

      possible_input_error :denied_reasons, :cannot_be_empty

      inputs do
        credit_score_used :integer, :required
        denied_reasons [:denied_reason], :required
        loan_file LoanFile, :required
      end

      def execute
        create_underwriting_decision
        transition_loan_file

        nil
      end

      def validate
        if denied_reasons.empty?
          add_input_error(:denied_reasons, :cannot_be_empty)
        end
      end

      def create_underwriting_decision
        run_subcommand!(
          CreateUnderwriterDecision,
          loan_file:,
          decision: :denied,
          credit_score_used:,
          denied_reasons:
        )
      end

      def transition
        :deny
      end

      def transition_loan_file
        run_subcommand!(TransitionLoanFileState, loan_file:, transition:)
      end
    end

    class ReviewLoanFile < Foobara::AgentBackedCommand
      description "Starts the underwriter review then checks requirements in its CreditPolicy " \
                  "and approves or denies accordingly."

      inputs UnderwriterSummary
      result LoanFile::UnderwriterDecision

      depends_on StartUnderwriterReview, DenyLoanFile, ApproveLoanFile

      verbose
      # llm_model "qwen3:32b"
      # agent_name "Inner"
    end

    class ReviewAllLoanFiles < Foobara::AgentBackedCommand
      result [{
        applicant_name: :string,
        decision: LoanFile::UnderwriterDecision
      }]

      depends_on ReviewLoanFile, FindALoanFileThatNeedsReview

      verbose
      # llm_model "qwen3:32b"
      # agent_name "Outer"
    end
  end
end

outcome = FoobaraDemo::LoanOrigination::ReviewAllLoanFiles.run

if outcome.success?
  outcome.result.each do |name_and_decision|
    name, decision = name_and_decision.values_at(:applicant_name, :decision)

    if decision.denied?
      puts "Denied: #{name}"
      puts "Reason: #{decision.denied_reasons.join(", ")}"
    else
      puts "Approve: #{name}"
    end
    puts
  end
else
  puts outcome.errors_hash
end
